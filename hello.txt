hello world!
hello git!
# 学生管理系统

## 功能：

1. 增加学生信息（姓名，年龄，性别，学号，数学，英语，C语言）
2. 修改学生信息
3. 删除学生信息
4. 查询所有学生信息
5. 查询指定学生信息（根据姓名或学号）
6. 保存学生信息（将学生信息写到指定的文件中）

```c
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct STUDENT {
	char name[10];
	int age;
	char gender[4];
	long int StudentID;
	int math;
	int eng;
	int cgrade;
};
typedef struct _NODE {
	struct STUDENT stu;
	struct _NODE* next;
}NODE;


void INIT();
void ADD(NODE* head);
void CHANGE(NODE* head);
void DELETES(NODE* head);
void ALL(NODE* head);
void FIND(NODE* head);
void SAVE(NODE* head);
void SEEK(NODE* head);
NODE* createHeadNode() {
	NODE* head = (NODE*)malloc(sizeof(NODE));
	head->next = NULL;
	return head;
}

int main() {
	NODE* head = createHeadNode();
	int n;
	SEEK(head);
	do {
		//初始化界面
		INIT();
		scanf("%d", &n);
		switch (n) {
		case 1:
			ADD(head);
			SAVE(head);
			break;
		case 2:
			CHANGE(head);
			SAVE(head);
			break;
		case 3:
			DELETES(head);
			SAVE(head);
			break;
		case 4:
			ALL(head);
			break;
		case 5:
			FIND(head);
			break;
		case 0:return 0;
		default:printf("输入错误，请重新输入》：\n");
		}
	} while (1);
	return 0;
}

void INIT()
{
	printf("				**************************************************\n");
	printf("				**************************************************\n");
	printf("				**************************************************\n");
	printf("				**************学*****1.增加新学生的信息 **********\n");
	printf("				**************生*****2.修改学生的信息  ***********\n");
	printf("				**************管*****3.删除学生信息    ***********\n");
	printf("				**************理*****4.查询所有学生信息***********\n");
	printf("				**************系*****5.查询指定学生信息***********\n");
	printf("				**************统*****0.退出系统        ***********\n");
	printf("				**************************************************\n");
	printf("				**************************************************\n");
	printf("				**************************************************\n");
	printf("				请输入要查询的内容》：");
}

void ADD(NODE* head)
{
	NODE* p=(NODE*)malloc(sizeof(NODE));
	p->next = NULL;
	NODE* move = head;
	printf("				请输入学生的姓名》：");
	scanf("%s", p->stu.name);
	printf("				请输入学生的年龄》：");
	scanf("%d", &p->stu.age);
	printf("				请输入学生的性别》：");
	scanf("%s", p->stu.gender);
	printf("				请输入学生的学号》：");
	scanf("%d", &p->stu.StudentID);
	printf("				请输入学生的数学成绩》：");
	scanf("%d", &p->stu.math);
	printf("				请输入学生的英语成绩》：");
	scanf("%d", &p->stu.eng);
	printf("				请输入学生的C语言成绩》：");
	scanf("%d", &p->stu.cgrade);
			if (head->next) {
				while (move->next != NULL) {
					move = move->next;
				}
				move->next = p;
			}
			else {
				head->next = p;
			}
}

void CHANGE(NODE* head)
{
	char name[10];
	printf("				请输入要修改的学生名字》：");
	scanf("%s", name);
	NODE* move = head;
	while (move->next != NULL) {
		if (strcmp(move->next->stu.name, name) == 0) {
			printf("				请输入学生的姓名》：");
			scanf("%s", move->next->stu.name);
			printf("				请输入学生的年龄》：");
			scanf("%d", &move->next->stu.age);
			printf("				请输入学生的性别》：");
			scanf("%s", move->next->stu.gender);
			printf("				请输入学生的学号》：");
			scanf("%d", &move->next->stu.StudentID);
			printf("				请输入学生的数学成绩》：");
			scanf("%d", &move->next->stu.math);
			printf("				请输入学生的英语成绩》：");
			scanf("%d", &move->next->stu.eng);
			printf("				请输入学生的C语言成绩》：");
			scanf("%d", &move->next->stu.cgrade);
			printf("修改成功!\n");
			break;
		}


		move = move->next;
	}
	if (strcmp(move->stu.name, name) != 0 && move->next == NULL) {
		printf("				未找到该学生!\n");
	}
}

void DELETES(NODE* head)
{
	char name[10];
	printf("				请输入要删除的学生名字》：");
	scanf("%s", name);
	NODE* move = head;
	while (move->next != NULL) {
		if (strcmp(move->next->stu.name, name) == 0) {
			NODE* tmp = move->next;
			move->next = move->next->next;
			free(tmp);
			tmp = NULL;
			printf("删除成功！\n");
			break;
		}

		move = move->next;
	}
	if (strcmp(move->stu.name, name) != 0 && move->next == NULL) {
		printf("				未找到该学生!\n");
	}
}

void ALL(NODE* head)
{
	NODE* move = head;
	while (move->next != NULL) {
		printf("				------------------------------------\n");
		printf("				姓名》：%s\n", move->next->stu.name);
		printf("				年龄》：%d\n", move->next->stu.age);
		printf("				性别》：%s\n", move->next->stu.gender);
		printf("				学号》：%ld\n", move->next->stu.StudentID);
		printf("				数学成绩》：%d\n", move->next->stu.math);
		printf("				英语成绩》：%d\n", move->next->stu.eng);
		printf("				C语言成绩》：%d\n", move->next->stu.cgrade);
		move = move->next;
	}
	printf("				------------------------------------\n");
}

void FIND(NODE* head)
{
	char name[10];
	printf("				请输入要查询的学生名字》：");
	scanf("%s", name);
	NODE* move = head;
	while (move->next != NULL) {
		if (strcmp(move->next->stu.name, name) == 0) {
			printf("				------------------------------------\n");
			printf("				姓名》：%s\n", move->next->stu.name);
			printf("				年龄》：%d\n", move->next->stu.age);
			printf("				性别》：%s\n", move->next->stu.gender);
			printf("				学号》：%ld\n", move->next->stu.StudentID);
			printf("				数学成绩》：%d\n", move->next->stu.math);
			printf("				英语成绩》：%d\n", move->next->stu.eng);
			printf("				C语言成绩》：%d\n", move->next->stu.cgrade);
			printf("				------------------------------------\n");
			break;
		}
		move = move->next;
	}if (strcmp(move->stu.name, name) != 0 && move->next == NULL) {
		printf("				未找到该学生!\n");
	}
}

void SAVE(NODE* head)
{
	NODE* move = head;
	FILE* pf = fopen("score.txt", "wb");
	while (move->next != NULL) {
		fwrite(&(move->next->stu), sizeof(struct STUDENT), 1, pf);
		move = move->next;
	}
	printf("保存成功！\n");
	fclose(pf);
	pf = NULL;
}

void SEEK(NODE* head)
{
	FILE* pf = fopen("score.txt", "rb");
	if (pf == NULL) {
		printf("无法打开文件！\n");
		return;
	}

	NODE* move = head;
	while (1) {
		NODE* p = (NODE*)malloc(sizeof(NODE));
		p->next = NULL;
		if (fread(&(p->stu), sizeof(struct STUDENT), 1, pf) != 1) {
			free(p);
			break; 
		}
		move->next = p;
		move = move->next;
	}

	fclose(pf);
	pf = NULL;
	printf("读取成功！\n");
}```

```
